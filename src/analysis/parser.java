
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package analysis;

import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import errorHandler.ModuloDeErrores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);this.str = new StringBuilder();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\023\002\000\002" +
    "\006\005\000\002\007\006\000\002\010\005\000\002\021" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\005\000\002\017\011\000\002\022\004\000\002" +
    "\022\003\000\002\020\010\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\023\005\001\002\000\020\003\025\023" +
    "\005\024\017\025\021\030\014\031\027\035\024\001\002" +
    "\000\004\036\011\001\002\000\004\002\010\001\002\000" +
    "\020\003\ufffe\023\ufffe\024\ufffe\025\ufffe\030\ufffe\031\ufffe" +
    "\035\ufffe\001\002\000\004\002\001\001\002\000\004\035" +
    "\012\001\002\000\004\037\013\001\002\000\020\003\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\030\ufffd\031\ufffd\035\ufffd\001" +
    "\002\000\004\017\116\001\002\000\026\002\ufffa\003\ufffa" +
    "\022\ufffa\024\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\035" +
    "\ufffa\037\ufffa\001\002\000\020\002\000\003\025\024\017" +
    "\025\021\030\014\031\027\035\024\001\002\000\004\034" +
    "\113\001\002\000\026\002\ufff9\003\ufff9\022\ufff9\024\ufff9" +
    "\025\ufff9\027\ufff9\030\ufff9\031\ufff9\035\ufff9\037\ufff9\001" +
    "\002\000\004\017\102\001\002\000\022\002\ufffb\003\ufffb" +
    "\022\ufffb\024\ufffb\025\ufffb\030\ufffb\031\ufffb\035\ufffb\001" +
    "\002\000\020\003\uffff\023\uffff\024\uffff\025\uffff\030\uffff" +
    "\031\uffff\035\uffff\001\002\000\004\016\100\001\002\000" +
    "\004\037\ufff6\001\002\000\026\002\ufff7\003\ufff7\022\ufff7" +
    "\024\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7\035\ufff7\037" +
    "\ufff7\001\002\000\020\003\025\021\031\024\017\025\021" +
    "\030\014\031\027\035\024\001\002\000\026\002\ufff8\003" +
    "\ufff8\022\ufff8\024\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\035\ufff8\037\ufff8\001\002\000\016\003\025\024\017\025" +
    "\021\030\014\031\027\035\024\001\002\000\026\002\uffdf" +
    "\003\uffdf\022\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\035\uffdf\037\uffdf\001\002\000\004\030\034\001\002" +
    "\000\004\017\035\001\002\000\014\017\047\032\041\033" +
    "\043\035\044\040\036\001\002\000\054\002\uffe4\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4\037\uffe4\001" +
    "\002\000\004\020\072\001\002\000\054\002\uffe6\003\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\022\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\030\uffe6\031\uffe6\035\uffe6\037\uffe6\001" +
    "\002\000\004\020\uffe1\001\002\000\022\004\070\005\066" +
    "\006\062\007\063\010\067\011\065\012\055\013\056\001" +
    "\002\000\004\020\uffe0\001\002\000\054\002\uffe3\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\020\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\031\uffe3\035\uffe3\037\uffe3\001" +
    "\002\000\004\020\uffe2\001\002\000\054\002\uffe9\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\053\015\052\020\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\027\uffe9\030\uffe9\031\uffe9\035\uffe9\037\uffe9\001" +
    "\002\000\004\035\024\001\002\000\004\020\051\001\002" +
    "\000\054\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\020\uffe5\022\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\035\uffe5\037\uffe5\001\002\000\010\017\047\035\044" +
    "\040\036\001\002\000\010\017\047\035\044\040\036\001" +
    "\002\000\054\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\035\uffe8\037\uffe8\001\002\000\010\017\047\035" +
    "\044\040\036\001\002\000\010\017\047\035\044\040\036" +
    "\001\002\000\054\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\020\uffea\022\uffea\024\uffea\025\uffea\027\uffea\030" +
    "\uffea\031\uffea\035\uffea\037\uffea\001\002\000\054\002\uffeb" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\035\uffeb\037" +
    "\uffeb\001\002\000\054\002\uffe7\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\035\uffe7\037\uffe7\001\002\000\010\017" +
    "\uffef\035\uffef\040\uffef\001\002\000\010\017\uffee\035\uffee" +
    "\040\uffee\001\002\000\010\017\047\035\044\040\036\001" +
    "\002\000\010\017\uffec\035\uffec\040\uffec\001\002\000\010" +
    "\017\ufff0\035\ufff0\040\ufff0\001\002\000\010\017\uffed\035" +
    "\uffed\040\uffed\001\002\000\010\017\ufff1\035\ufff1\040\ufff1" +
    "\001\002\000\010\012\055\013\056\020\ufff2\001\002\000" +
    "\026\002\uffd9\003\uffd9\022\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\035\uffd9\037\uffd9\001\002\000\020\003" +
    "\025\022\074\024\017\025\021\030\014\031\027\035\024" +
    "\001\002\000\026\002\uffde\003\uffde\022\uffde\024\uffde\025" +
    "\uffde\027\uffde\030\uffde\031\uffde\035\uffde\037\uffde\001\002" +
    "\000\022\002\ufffc\003\ufffc\022\ufffc\024\ufffc\025\ufffc\030" +
    "\ufffc\031\ufffc\035\ufffc\001\002\000\004\037\077\001\002" +
    "\000\026\002\ufff5\003\ufff5\022\ufff5\024\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\035\ufff5\037\ufff5\001\002\000\010" +
    "\017\047\035\044\040\036\001\002\000\034\002\ufff3\003" +
    "\ufff3\012\055\013\056\020\ufff3\022\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\035\ufff3\037\ufff3\001\002\000" +
    "\014\017\047\032\041\033\043\035\044\040\036\001\002" +
    "\000\004\020\104\001\002\000\004\026\105\001\002\000" +
    "\020\003\025\021\031\024\017\025\021\030\014\031\027" +
    "\035\024\001\002\000\006\027\110\037\111\001\002\000" +
    "\026\002\uffdd\003\uffdd\022\uffdd\024\uffdd\025\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\035\uffdd\037\uffdd\001\002\000\020\003" +
    "\025\021\031\024\017\025\021\030\014\031\027\035\024" +
    "\001\002\000\026\002\uffdb\003\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb\037\uffdb\001\002" +
    "\000\026\002\uffdc\003\uffdc\022\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\035\uffdc\037\uffdc\001\002\000\010" +
    "\017\047\035\044\040\036\001\002\000\010\012\055\013" +
    "\056\037\115\001\002\000\026\002\ufff4\003\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\035\ufff4\037" +
    "\ufff4\001\002\000\014\017\047\032\041\033\043\035\044" +
    "\040\036\001\002\000\004\020\120\001\002\000\004\031" +
    "\121\001\002\000\020\003\025\021\031\024\017\025\021" +
    "\030\014\031\027\035\024\001\002\000\026\002\uffda\003" +
    "\uffda\022\uffda\024\uffda\025\uffda\027\uffda\030\uffda\031\uffda" +
    "\035\uffda\037\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\002\005\003\003\004\006\001\001\000" +
    "\020\004\022\005\015\006\021\007\014\010\025\017\017" +
    "\020\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\074\007\014\010\025\017\017\020\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\075\001\001\000\002\001\001\000\016\006" +
    "\031\007\014\010\025\016\032\017\017\020\027\001\001" +
    "\000\002\001\001\000\016\005\072\006\021\007\014\010" +
    "\025\017\017\020\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\041\013\045\014" +
    "\037\015\036\021\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\060\013\045" +
    "\014\037\001\001\000\010\012\053\013\045\014\037\001" +
    "\001\000\002\001\001\000\004\014\057\001\001\000\004" +
    "\014\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\070\013\045\014\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\074\007\014\010" +
    "\025\017\017\020\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\100\013\045\014\037\001\001\000\002\001\001\000\014" +
    "\012\041\013\045\014\037\015\102\021\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\031\007\014" +
    "\010\025\016\105\017\017\020\027\001\001\000\004\022" +
    "\106\001\001\000\002\001\001\000\016\006\031\007\014" +
    "\010\025\016\111\017\017\020\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\113\013\045\014\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\041\013\045\014\037\015\116\021\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\031\007\014\010" +
    "\025\016\121\017\017\020\027\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private static int errors = 0;
  private StringBuilder errorsStr;
  private ModuloDeErrores errorHandler;
  public StringBuilder str;
  public void report_error(String message, Object info) {
		errorsStr = new StringBuilder();
		if(info != null){
			if(info.toString()!= "#0"){
				try {
					errorHandler = new ModuloDeErrores();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (info instanceof String){
					errorsStr.append("  "+ errors + "==> " + info + " "+ message+"\n");
					try {
						errorHandler.syntError(errorsStr.toString());
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				else {
					StringBuffer m = new StringBuffer("Error ");
					if (info instanceof java_cup.runtime.Symbol) 
						m.append( "("+info.toString()+")" );     
					m.append(" : "+message+"\n");   
					errorsStr.append(m);
					try {
						errorHandler.syntError(errorsStr.toString());
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}  
		}
	}

    public void report_fatal_error(String message, Object info) {
  	if(this.cur_token.value != null){
  		report_error(message, info);	
  	}
    }
	private void syntOutput(){
		//    	Constants K = new Constants();
		try {
			DataOutputStream os = new DataOutputStream(new 
					FileOutputStream("./output/syntAnalisis.txt"));
			os.writeBytes(this.str.toString());
			os.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
     


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
		this.parser.syntOutput();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= listavariables listadeclaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listavariables ::= listavariables declaracionvariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listavariables ::= declaracionvariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracionvariable ::= DECLARE TYPE ID NEWLINE 
            {
              Object RESULT =null;
		parser.str.append("OK\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionvariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listadeclaraciones ::= listadeclaraciones declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listadeclaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= mover 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracionIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= expresionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
report_error("syntax error",null);
parser.str.append("NOT OK\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= error NT$0 NEWLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mover ::= MOVE DOOR expresionSuma NEWLINE 
            {
              Object RESULT =null;
		parser.str.append("OK\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mover",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionAsignacion ::= ID ASSIGN expresionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAsignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicion ::= expresionSuma operadorRelacional expresionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorRelacional ::= MORETHAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operadorRelacional ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operadorRelacional ::= LESSEQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operadorRelacional ::= MOREEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operadorRelacional ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operadorRelacional ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionSuma ::= expresionSuma PLUS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSuma",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionSuma ::= expresionSuma MINUS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSuma",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionSuma ::= expresionMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSuma",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionMult ::= expresionMult TIMES expresionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionMult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionMult ::= expresionMult DIVISION expresionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionMult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionMult ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionMult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termino ::= LBRACK expresionAsignacion RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termino ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termino ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionCondicion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCondicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionCondicion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCondicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionCondicion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCondicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaCondiciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCondiciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaCondiciones ::= LCURL listadeclaraciones RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCondiciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionSeleccion ::= IF LBRACK expresionCondicion RBRACK THEN listaCondiciones declaracionElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSeleccion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionElse ::= ELSE listaCondiciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionElse",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionElse ::= NEWLINE 
            {
              Object RESULT =null;
		parser.str.append("OK\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionElse",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionIteracion ::= WHILE LBRACK expresionCondicion RBRACK DO listaCondiciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionIteracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionIteracion ::= DO listaCondiciones WHILE LBRACK expresionCondicion RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionIteracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
